#!/usr/bin/env node

var JSON = require("JSON"); 
var fs = require("fs"); 
var exec = require("child_process").exec; 
var spawn = require('child_process').spawn;
var WebSocket = require("ws"); 
var $ = require("jquery-deferred"); 
var sha1 = require("sha1"); 
var async = require("async"); 

var config = { 
	host: "192.168.1.1", 
	port: 80, 
	path: "/websocket/",
	username: "admin", 
	password: "admin",
	verbose: 0
};

console.debug = function(msg){
	if(config.verbose > 0) console.log(msg); 
}

var cli_params = []; 
for(var i = 0; i < process.argv.length; i++){
	switch(process.argv[i]){
		case "--host": config.host = process.argv[++i]; break; 
		case "--port": config.port = parseInt(process.argv[++i]); break; 
		case "--path": config.path = process.argv[++i]; break; 
		case "--username": config.username = process.argv[++i]; break; 
		case "--password": config.password = process.argv[++i]; break; 
		case "--verbose": config.verbose = parseInt(process.argv[++i]); break; 
		default: 
			cli_params.push(process.argv[i]); 
	}; 
} 

function usage(){
	console.log("orangerpc <options> [call|list] [object] [method] [{..params..}]");
	console.log("	--host <host>"); 
	console.log("		specify host to connect to (default: "+config.host+")"); 
	console.log("	--path <websocket path>"); 
	console.log("		if you are using http then specify http websocket path on which to start websocket (default: "+config.path+")"); 
	console.log("	--port <port>"); 
	console.log("		specify port to connect on (default: "+config.port+")"); 
	console.log("	--username <username>"); 
	console.log("		specify username to login as (default: "+config.username+")"); 
	console.log("	--password <password>"); 
	console.log("		user password (default: "+config.password+")"); 
	process.exit(); 
}

if(!config.host || !config.port){
	usage(); 
}

function RPC(){
	this.requests = {}; 
	this.ev_handlers = {}; 
	this.id = 1; 
}

RPC.prototype.connect = function(){
	var self = this; 
	var url = "ws://"+config.host+":"+config.port+config.path; 
	console.debug("Connecting to "+url); 
	self.socket = new WebSocket(url);  
	self.connect = $.Deferred(); 
	self.socket.onopen = function(){     
		console.debug("Websocket RPC connected!"); 

		self.socket.onmessage = function(e){ 
			try {
				var json = JSON.parse(e.data); 
				var req = self.requests[json.id]; 
				if(req && json.result){
					req.resolve(json.result); 
				} else if(req && json.error){
					req.reject(json.error); 
				} else if(json.method){
					if(self.ev_handlers[json.method]){
						console.log("got event"); 
						self.ev_handlers[json.method].map(function(x){
							x(json); 
						}); 
					}
				} else if(!req){
					console.error("Request not found!"); 
					process.exit(-1); 
				}
				self.requests[json.id] = undefined; 
			} catch(e){
				console.error("ERROR: could not parse response: "+e); 
				process.exit(-1); 
			}
		} 

		self.connect.resolve();  
	}                               
	self.socket.onerror = function(e){    
		console.debug("Websocket error: "+e);         
		self.connect.reject(); 
		process.exit(-1); 
	}
	self.socket.onclose = function(){    
		console.debug("websocket closed!"); 
		process.exit(-1); 
	}
	return self.connect.promise(); 
}

RPC.prototype.event = function(method, handler){
	if(!this.ev_handlers[method]) this.ev_handlers[method] = []; 
	this.ev_handlers[method].push(handler); 
}

RPC.prototype.request = function(params){
	var def = $.Deferred(); 
	var self = this; 
	var msg = {
		jsonrpc: "2.0", 
		id: self.id++, 
		method: params.method, 
		params: params.params || []
	}; 
	self.requests[msg.id] = def; 
	console.debug("REQUEST: "+JSON.stringify(msg));
	try {
		self.socket.send(JSON.stringify(msg)+"\n"); 
	} catch(e){
		console.error("#### socket send failed!"); 
	}
	return def.promise(); 
}

RPC.prototype.login = function(params){
	var self = this; 
	var def = $.Deferred(); 
	self.request({
		method: "challenge",
		params: []
	}).done(function(ch){
		console.debug("Got challenge: "+ch.token); 
		self.request({
			method: "login", 
			params: [params.username, sha1(ch.token+sha1(params.password))]
		}).done(function(s){
			console.debug("Got response: "+s.success); 
			self.sid = s.success; 
			def.resolve(); 
		}).fail(function(){
			console.debug("Login failed!"); 
			def.reject(); 
		});
	}); 
	return def.promise(); 
}

RPC.prototype.logout = function(params){
	var self = this; 
	var def = $.Deferred(); 
	self.request({
		method: "logout", 
		params: [self.sid]
	}).done(function(e){
		def.resolve(e); 
	}).fail(function(e){
		def.reject(e); 
	}); 
	return def.promise(); 
}

RPC.prototype.call = function(params){
	var self = this; 
	var def = $.Deferred(); 
	self.request({
		method: "call", 
		params: [self.sid, params.object, params.method, params.params]
	}).done(function(e){
		def.resolve(e); 
	}).fail(function(e){
		def.reject(e); 
	}); 
	return def.promise(); 
}

RPC.prototype.list = function(params){
	var self = this; 
	var def = $.Deferred(); 
	self.request({
		method: "list", 
		params: [self.sid, params.wildcard || "*"]
	}).done(function(e){
		def.resolve(e); 
	}).fail(function(e){
		def.reject(e); 
	}); 
	return def.promise(); 
}

var return_code = 0; 
var client = new RPC(); 
client.connect({
	host: config.host, 
	port: config.port, 
	path: config.path
}).then(function(){
	return client.login({
		username: config.username, 
		password: config.password
	}).fail(function(){
		console.error("Could not login!"); 
		process.exit(-1); 
	}); 
}).then(function(){
	if(cli_params.length == 0) {
		console.log("No arguments given!"); 
		process.exit(0); 
	}

	while(cli_params.length > 0){
		var action = cli_params.shift(); 	
		if(action == "call"){
			var object = cli_params.shift(); 
			var method = cli_params.shift(); 
			var params = {}; 
			try {
				params = JSON.parse(cli_params.shift()); 
			} catch(e){ }
			if(!object || !method) {
				console.error("Call requires an object name and method name!"); 
				process.exit(-1); 
			}
			return client.call({
				object: object, 
				method: method, 
				params: params
			}).done(function(r){
				console.debug("Response: "+JSON.stringify(r)); 
				console.log(JSON.stringify({result: r}, null, 4)); 
			}).fail(function(r){
				console.debug("Error: "+JSON.stringify(r)); 
				console.error(JSON.stringify({error: r}, null, 4)); 
				return_code = r.code; 
			}); 
		} else if(action == "list"){
			var wildcard = cli_params.shift(); 
			return client.list({
				path: wildcard
			}).done(function(r){
				console.log(JSON.stringify(r, null, 4)); 
			}).fail(function(r){
				console.error(JSON.stringify({error: r})); 
				return_code = -1; 
			}); 
		} else if(action == "listen") {
			var name = cli_params.shift(); 
			console.log("listen: "+name); 
			var def = $.Deferred(); 
			client.event(name, function(args){
				console.log(JSON.stringify(args)); 	
				def.resolve(); 
			}); 
			return def.promise(); 
		} else if(action == "speedtest"){
			// like call but makes many requests and returns metric
			var object = cli_params.shift(); 
			var method = cli_params.shift(); 
			var params = {}; 
			try {
				params = JSON.parse(cli_params.shift()); 
			} catch(e){ }
			if(!object || !method) {
				console.error("Call requires an object name and method name!"); 
				process.exit(-1); 
			}
			var metrics = []; 
			for(var i = 0; i < 10; i++){
				metrics.push({id: i, time: 0}); 
			}
			var def = $.Deferred(); 
			console.log("SPEEDTEST: running "+metrics.length+" calls.."); 
			var test_start = new Date(); 
			async.map(metrics, function(m, next){
				client.call({
					object: object, 
					method: method, 
					params: params
				}).done(function(r){
					m.time = 0; //Date.now() - call_start; 
					m.ok = true; 
					next(); 
				}).fail(function(r){
					next(); 	
				}); 
			}, function done(e){
				var total = metrics.reduce(function(a, b){ return a.time + b.time; }, 0); 	
				var total_time = (Date.now() - test_start) * 0.001; 
				var payload_size = String(JSON.stringify(params)).length; 
				var total_size = metrics.length * payload_size; 
				console.log("SPEEDTEST: "+total_time+"s for "+metrics.length+" calls, payload "+payload_size+" bytes, "+Math.floor((total_size / total_time / 1000) * 8)+"Kbps"); 
				if(e) def.reject(); 
				else def.resolve(); 	
			}); 
			return def.promise(); 
		}
	}
}).then(function(){
	return client.logout().done(function(){
		process.exit(return_code); 
	}).fail(function(){
		process.exit(-1); 
	}); 
}).then(function(){
	console.debug("Done!"); 
}).fail(function(){
	process.exit(return_code); 
}); 

